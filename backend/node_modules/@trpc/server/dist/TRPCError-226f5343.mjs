function getMessageFromUnknownError(err, fallback) {
    if (typeof err === 'string') {
        return err;
    }
    if (err instanceof Error && typeof err.message === 'string') {
        return err.message;
    }
    return fallback;
}
function getErrorFromUnknown(cause) {
    if (cause instanceof Error) {
        return cause;
    }
    const message = getMessageFromUnknownError(cause, 'Unknown error');
    return new Error(message);
}
function getCauseFromUnknown(cause) {
    if (cause instanceof Error) {
        return cause;
    }
    return undefined;
}

function getTRPCErrorFromUnknown(cause) {
    const error = getErrorFromUnknown(cause);
    if (error instanceof TRPCError) {
        return error;
    }
    const trpcError = new TRPCError({
        code: 'INTERNAL_SERVER_ERROR',
        cause: error,
        message: error.message
    });
    // Inherit stack from error
    trpcError.stack = error.stack;
    return trpcError;
}
class TRPCError extends Error {
    constructor(opts){
        const message = opts.message ?? getMessageFromUnknownError(opts.cause, opts.code);
        const cause = opts.cause !== undefined ? getErrorFromUnknown(opts.cause) : undefined;
        // eslint-disable-next-line @typescript-eslint/ban-ts-comment
        // @ts-ignore https://github.com/tc39/proposal-error-cause
        super(message, {
            cause
        });
        this.code = opts.code;
        this.name = this.constructor.name;
    }
}

export { TRPCError as T, getTRPCErrorFromUnknown as a, getCauseFromUnknown as g };
